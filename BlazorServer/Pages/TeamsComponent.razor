@page "/teams"

<h3>Teams</h3>

<!-- Button trigger modal -->
<!--<button type="button" class="btn btn-primary" data-toggle="modal" data-target="#exampleModal">
    Launch demo modal
</button>-->
<!-- Modal -->
<!--<div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Modal title</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                ...
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary">Save changes</button>
            </div>
        </div>
    </div>
</div>-->
<br />
<br />

@*<p>
        <table class="table table-responsive-md table-bordered">
            @foreach (var team in Teams)
            {
                <tr>
                    <td><a href="@($"/team/{team.Id}")" class="nav-link">@team.Name</a></td>
                    <td>@team.Region</td>
                    <td>
                        <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#exampleModalCenter">
                            Edit
                        </button>
                    </td>
                </tr>
            }
        </table>
    </p>*@

@*<p>
        <button class="btn btn-primary" @onclick="SetCurrentCount">+</button>
        <span>@currentCount</span>
    </p>*@

<!--<h2>Teams Cascading Component</h2>

<p>
    <button class="btn btn-primary" @onclick="@(() => SetCurrentCountHandler(0))">+</button>
    <span>@currentCount</span>
</p>

<button class="btn btn-info" @onclick="(() => FirstChildComponent.Show())">Show Child</button>

<p>
    <CascadingValue Name="Number" Value="@currentCount">-->
@*<FirstCascadingComponent SetCurrentCount="@(() => SetCurrentCountHandler(null))" />*@
<!--<FirstCascadingComponent SetCurrentCount="SetCurrentCountHandler" @ref="FirstChildComponent" />
    </CascadingValue>
</p>

<FieldTemplateComponent Label="Name">
    <Fragment>
        <input class="input" type="text" placeholder="Name">
    </Fragment>
</FieldTemplateComponent>
<FieldTemplateComponent Label="Email">
    <Fragment>
        <input class="input" type="email" placeholder="Email">
    </Fragment>
</FieldTemplateComponent>
<FieldTemplateComponent Label="Password">
    <Fragment>
        <input class="input" type="password" placeholder="password">
    </Fragment>
</FieldTemplateComponent>

<AutoGridCompontent Items="Teams" CssClass="is-striped is-hoverable" />
            -->
@*<RepeaterComponent Teams="Teams">
        <Row Context="team">
            <div>@team.Name</div>
            <div class="ml-5">@team.Region</div>
        </Row>
    </RepeaterComponent>*@

<EditComponent Teams="Teams" @ref="Editor">
    <TeamsTemplate Context="team">

        @*<button type="button" class="btn btn-primary" data-toggle="modal" data-target="#exampleModalCenter">
                Launch demo modal
            </button>*@

        <tr>
            <td><a href="@($"/team/{team.Id}")" class="nav-link">@team.Name</a></td>
            <td>@team.Region</td>
            <td>
                <button type="button" class="btn btn-primary ml-5" data-toggle="modal" data-target="#exampleModalCenter" @onclick="(() => {
                                                                                                                                       EditTeam(team);
                                                                                                                                   })">
                    Edit
                </button>
            </td>
        </tr>
    </TeamsTemplate>

    <EditTemplate Context="teamToEdit">

        <Modal @ref="modal">
            <Title>
                <h5 class="modal-title">Edit</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="() => { modal.Close(); ClearEditingTeam(); }">
                    <span aria-hidden="true">&times;</span>
                </button>
            </Title>
            <Body>
                <div>
                    <label>Name:</label>
                    <input class="form-control" type="text" @bind="teamToEdit.Name" @bind:event="oninput" />
                </div>
                <div>
                    <label>Region:</label>
                    <input class="form-control" type="text" @bind="teamToEdit.Region" @bind:event="oninput" />
                </div>
            </Body>
            <Footer>
                <button type="button" class="btn btn-primary">Save changes</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => { modal.Close(); ClearEditingTeam(); }">Close</button>
            </Footer>
        </Modal>
    </EditTemplate>
</EditComponent>

@code{

    #region Variables

    int currentCount = 0;
    List<Team> Teams;
    FirstCascadingComponent FirstChildComponent;
    EditComponent<Team> Editor;
    Modal modal;

    #endregion

    #region Properties

    #endregion

    #region Methods

    protected override void OnInitialized()
    {
        base.OnInitialized();

        Teams = new List<Team>()
{
            new Team {Id = 1, Name = "Hearts Of Oak", Region = "Accra", },
            new Team {Id = 2, Name = "Asante Kotoko", Region = "Kumasi"},
            new Team {Id = 3, Name = "Berekum Chelsea", Region = "Western"},
            new Team {Id = 4, Name = "Liberty Professionals", Region = "Accra"}
        };

    }

    void SetCurrentCountHandler(int v)
    {
        currentCount++;
    }

    void EditTeam(Team team)
    {
        Editor.TeamToEdit = team;
        StateHasChanged();
    }

    void ClearEditingTeam()
    {
        Editor.TeamToEdit = null;
        StateHasChanged();
    }

    #endregion

    #region Models

    class Team
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Region { get; set; }
    }

    public class ForwardRef
    {
        ElementReference _modal;

        public ElementReference _Modal
        {
            get => _modal;
            set => Set(_modal);
        }

        void Set(ElementReference value)
        {
            _modal = value;
        }

    }
    #endregion
}